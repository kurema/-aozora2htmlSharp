<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="TagSyntaxError" xml:space="preserve">
    <value>The rule of repeating notes, "narrow range first, wide range after" is not being followed. Refer to the guideline and fix it</value>
  </data>
  <data name="UndefinedHeader" xml:space="preserve">
    <value>Found undefined header</value>
  </data>
  <data name="UseCrlf" xml:space="preserve">
    <value>Change the line feed code to "CR+LF" (\r\n)</value>
  </data>
  <data name="ErrorStop" xml:space="preserve">
    <value>Error (line {0}):{1}. 
Stoped processing</value>
  </data>
  <data name="InvalidFontSize" xml:space="preserve">
    <value>The specified font size is invalid</value>
  </data>
  <data name="UnsupportedRuby" xml:space="preserve">
    <value>Found unsupported complex ruby</value>
  </data>
  <data name="WarnOnebyte" xml:space="preserve">
    <value>Warning (line {0}): 1 byte character "{1}" is used</value>
  </data>
  <data name="WarnChuki" xml:space="preserve">
    <value>Warning (line {0}): "{1}" is used. Is it misuse of note symbols?</value>
    <comment>@MutedRule(PunctuationTail)</comment>
  </data>
  <data name="WarnJisGaiji" xml:space="preserve">
    <value>Warning (line {0}): JIS external character "{1}" is used</value>
  </data>
  <data name="DontCrlfInStyle" xml:space="preserve">
    <value>A line break occurred in the {0}. Use block notation for elements that straddle line breaks</value>
  </data>
  <data name="TerminateInStyle" xml:space="preserve">
    <value>The text ended in the {0}</value>
  </data>
  <data name="InvalidClosing" xml:space="preserve">
    <value>Found the termination of {0}, but not in {0}</value>
  </data>
  <data name="InvalidNesting" xml:space="preserve">
    <value>Found the termination of {0}, but in {1}</value>
  </data>
  <data name="DontUseDoubleRuby" xml:space="preserve">
    <value>Don't add 2 ruby ​​characters to the same place</value>
  </data>
  <data name="DontAllowTripleRuby" xml:space="preserve">
    <value>Don't add 3 ruby ​​characters to one word</value>
  </data>
  <data name="WarnUnexpectedTerminator" xml:space="preserve">
    <value>Warning (line {0}): Unexpected end of file</value>
  </data>
  <data name="WarnUndefinedCommand" xml:space="preserve">
    <value>Warning (line {0}): Unsupported command "{1}". Ignoring</value>
  </data>
  <data name="WarnInvalidAccentBrancket" xml:space="preserve">
    <value>Warning (line {0}): The beginning and end of the hexagonal brackets for accent decomposition are not paired in the line</value>
  </data>
  <data name="AuthorTwice" xml:space="preserve">
    <value>parser encounted author twice</value>
  </data>
  <data name="EncountUndefinedCondition" xml:space="preserve">
    <value>encount undefined condition</value>
  </data>
  <data name="FailedToLoadJIS2UCS" xml:space="preserve">
    <value>Failed to load JIS X 0213 table. Is embedded resource supported?</value>
  </data>
</root>